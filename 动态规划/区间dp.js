//双区间dp

//leetcode 10正则表达式匹配
//leetcode 44通配符匹配

/*
* 这种题目我们一般定义状态dp[i][j]表示前面i个字符能否通过j个字符进行完全匹配
* eg：正则表达式匹配中给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 '.' 和 '*' 的正则表达式匹配。'.' 匹配任意单个字符，'*' 匹配零个或多个前面的那一个元素
 * 首先我们进行状态转移
 * 1、在两个字符相等的情况以及p【j】字符为.的时候我们只需要判断前面dp[i-1][j-1]
 * 2、在p[j]为*时候我们就需要判断匹配0个、 1个、以及多个的情况（在匹配多个的时候， 假设我们匹配两个， 那我们在i-2的时候其实已经推导到j这个位置了，i的字符是否存在并无影响）
 *
 */

var isMatch = function(s, p) {
    //dp[i][j]表示s前i个字符能否匹配p前j个字符
    //预处理
    s = ' ' + s
    p = ' ' + p
    let m = s.length
    let n = p.length
    let dp = Array.from(new Array(m + 1), () => new Array(n + 1).fill(false))
    dp[0][0] = true
    //预处理， 我们需要找出匹配前面0个字符的串
    for (let j = 1; j <= n; j++) {
        if (p[j - 1] === '*') dp[0][j] = dp[0][j - 2]
    }
    for (let i = 1; i <= m; i++) {
        for (let j = 1; j <= n; j++) {
            if (s[i - 1] === p[j - 1] || p[j - 1] === '.') {
                dp[i][j] = dp[i - 1][j - 1]
            } else if (p[j - 1] === '*') {
                if (p[j - 2] !== s[i - 1] && p[j - 2] !== '.') {
                    dp[i][j] = dp[i][j - 2] //p的字符匹配不上就让他消失，即匹配0个
                } else {
                    // 匹配0个我们就让p字符的前一个进行消失，就时dp[i][j-2]
                    //匹配1个的情况我们就直接把当前p【j-1】的*号去掉就是比较dp[i][j-1]
                    //匹配多个的情况就是我们在s中存在多个s[i-1], 我们去掉一个s[i-1]对结果并无影响即我们可以直接求dp[i-1][j]
                    dp[i][j] = dp[i][j - 2] || dp[i - 1][j] || dp[i][j - 1]
                }
            }
        }
    }

    return dp[m][n]
}


